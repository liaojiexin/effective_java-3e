避免使用终结方法（finalizer，jdk8及之前）和清除方法（cleaner，jdk8以后）
终结方法通常是不可预测的，也是很危险的，一般情况下是不必要的。清除方法没有终结方法那么危险，但仍然
是不可预测、运行缓慢，一般情况下也是不必要的，注重时间的任务不应该由终结方法或者清除方法来完成。
永远不应该依赖终结方法或者清除方法来更新重要的持久状态。同时使用终结方法和清除方法有一个非常严重的性能损失。
终结方法还有一些问题，具体查看书籍。

如果类的对象中封装的资源确实需要终止，只需要让类实现AutoCloseable，并要求其客户端在每个实例不再需要的时候调用
close方法，一般是利用try-with-resources确保终止，即使遇到异常也是如此。
该实例必须记录下自己是否已经被关闭了：close方法必须在一个私有域中记录下“该对象已经不再有效”。如果这些方法
是在对象已经终止之后被调用，其他的方法就必须检查这个域，并抛出IllegalStateException异常。

终结方法和清除方法两个合法用途。
第一种是当资源的所有者忘记调用它的close方法时，终结方法或者清除方法可以充当“安全网”。
第二种时与对象的本地对等体有关，本地对等体是一种本地对象，普通对象通过本地方法委托给一个本地对象。
因为本地对等体不是一个普通对象，所以垃圾回收器不会知道它，当它的java对等体被回收的时候，它不会被回收。如果
本地对等体没有关键资源，并且性能也可以接受，那么清除方法或者终结方法正是执行这项任务最合适的工具。

1.Room 清除方法的使用技巧
2.Adult try-with-resource正确调用Room
3.Teenager 错误调用Room