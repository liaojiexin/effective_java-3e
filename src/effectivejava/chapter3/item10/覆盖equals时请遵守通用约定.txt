覆盖equals时请遵守通用约定

以下情况可以不用覆盖equals
1.类的每个实例本质上都是唯一的
2.类没有必要提供“逻辑相等”的测试功能
3.超类已经覆盖了equals，超类的行为对于这个类也是合适的
4.类是私有的，可以确定它的equals方法永远不会被调用
5.特殊的“值类”，即使实例受控确保“每个值至多只存在一个对象”的类（第一章第一条）

具有自己特有的“逻辑相等”概念，而且超类还没有覆盖equals。这通常属于“值类”的情形，这个时候应该覆盖equals方法。

--------------------------------------------------------------------

覆盖equals要遵守的通用约定
1.自反性：对于任何非null的引用值x，x.equals(x)必须返回true。
2.对称性：对于任何非null的引用值x和y，当且仅当y.equals(x)返回true时，x.equals(y)必须返回true。
3.传递性：对于任何非null的引用值x、y和z，如果x.equals(y)返回true，并且y.equals(z)也返回true，那么
x.equals(z)也必须返回true。
4.一致性：对于任何非null的引用值x和y，只要equals的比较操作在对象中所用的信息没有被修改，多次调用x.equals(y)
就会一致地返回true，或者一致地返回false。
5.对于任何非null的引用值x，x.equals(null)必须返回false。（一般在equals中进行转换之前必须使用instanceof操作符，检查其参数类型是否正确，可以防止违反非空性）

1.CaseInsensitiveString 违反对称性
2.（代码疑惑，待重看）Point\inheritance.ColorPoint 违反对称性(Point的第一个equals和ColorPoint的第一个equals)和传递性(Point的第一个equals和ColorPoint的第二个equals),
解决方法：Point第二个equals/inheritance.CounterPointTest/inheritance.CounterPoint/composition.ClorPoint

-----------------------------------------------
实现高质量equals方法的诀窍
1.使用==操作符检查“参数是否为这个对象的引用”。
2.使用instanceof操作符检查“参数是否为正确的类型”。
3.把参数转换为正确类型。
4.对于该类中的每个“关键”域，检查参数中的域是否与该对象中对应的域相匹配。
在编写完equals方法后要反问自己三个问题：是否对称的、传递的、一致的。（一般自反性和非空性会自动满足）

例子：PhoneNumber

最后告诫
1.覆盖equals时总要覆盖hashCode
2.不要企图让equals方法过于智能
3.不要将equals声明中的Object对象替换为其他的类型
